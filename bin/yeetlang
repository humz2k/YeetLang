#!/usr/bin/env python3

import lex
import parse
import os
import sys

if __name__ == "__main__":

    args = sys.argv[1:]

    if len(args) == 1:
        if args[0] == "--help" or args[0] == "-h":
            print("USAGE: " + sys.argv[0] + " <inputfile> <outputfile> [memory (bytes)]")
            exit()

    if (len(args) != 2) and (len(args) != 3):
        print("USAGE: " + sys.argv[0] + " <inputfile> <outputfile> [memory (bytes)]")
        exit()

    filename = args[0]
    tmp_file = filename.split(".")[0] + "_YEET_TMP.c"
    outfile = args[1]
    if len(args) == 3:
        memory = str(int(args[2])//4)
    else:
        memory = "100"

    with open(filename,"r") as f:
        raw = f.read()

    variables = [i.strip() for i in raw.split("\n")[0].split(";")]
    raw = "\n" + "\n".join(raw.split("\n")[1:])

    #token_file = "tokens.txt"
    token_file = "/".join(os.path.realpath(__file__).split("/")[:-1]) + "/tokens.txt"

    lexer = lex.get_lexer(token_file,variables)

    tokens = lexer.lex(raw)

    #for token in tokens:
    #    print(token)
    #exit()

    parser = parse.get_parser(token_file)

    base = parser.parse(tokens)

    out = base.eval()

    header = """#include <stdlib.h>
    #include <stdio.h>
    union Addr {
        int asInt;
        float asFloat;
    };
    typedef union Addr addr;

    """
    main = "int main(){\n\taddr* arr = malloc(" + memory + "*sizeof(addr));\n\t" + ";\n\t".join(["addr " + i + ";" + i + ".asInt = " + str(idx) for idx,i in enumerate(variables)]) + ";\n"

    end = "\tfree(arr);\n\treturn 0;\n}"

    out = header + main + out + end

    with open(tmp_file,"w") as f:
        f.write(out)

    if "YEET_CC" in os.environ:
        cc = os.environ["YEET_CC"]
    else:
        cc = "gcc"
    #compile_line = 
    os.system(cc + " " + tmp_file +  " -o " + outfile)
    #print(compile_line)
    os.remove(tmp_file)

